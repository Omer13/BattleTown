#ifndef OBSTACLES_H
#define OBSTACLES_H

// Include necessary libraries and headers
#include "raylib.h"  // Raylib library for graphics and input handling
#include <map>       // Standard map container
#include <vector>    // Standard vector container
#include <iostream>  // Standard input/output stream

using namespace std;  // Use the standard namespace

// Define an enumeration for different types of obstacles
enum ObstacleType {
    SPACE,  // Represents empty space
    BRICK_BLOCK,  // Represents a full brick block
    BARRIER_BLOCK,  // Represents a full barrier block
    TREE_BLOCK,  // Represents a full tree block
    WATER,  // Represents water
    TREE,  // Represents a single tree
    BARRIER,  // Represents a single barrier
    BRICK,  // Represents a single brick
    HALF_LOWER_BARRIER_BLOCK,  // Represents the lower half of a barrier block
    HALF_LEFT_BRICK_BLOCK,  // Represents the left half of a brick block
    HALF_RIGHT_BRICK_BLOCK,  // Represents the right half of a brick block
    HALF_UPPER_BRICK_BLOCK,  // Represents the upper half of a brick block
    HALF_LOWER_BRICK_BLOCK,  // Represents the lower half of a brick block
    HALF_LEFT_BARRIER_BLOCK,  // Represents the left half of a barrier block
    HALF_UPPER_BARRIER_BLOCK,  // Represents the upper half of a barrier block
    HALF_RIGHT_BARRIER_BLOCK,  // Represents the right half of a barrier block
    SPAWN_POINT  // Represents a spawn point
};

// Define the Obstacle class
class Obstacle {
public:
    ObstacleType type;  // The type of obstacle
    Rectangle sizeAndPosition;  // The size and position of the obstacle

    bool damageable;  // Whether the obstacle can be damaged
    int damageLevel;  // The current damage level of the obstacle

    // Constructor for the Obstacle class
    Obstacle(ObstacleType ObstacleType, Rectangle sizeAndPosition, bool damageable = false, int damageLevel = 2)
        : type(ObstacleType), sizeAndPosition(sizeAndPosition) {
    }

};

// Define a 2D array representing the obstacle map
ObstacleType tempObstacleMap[455][13] = {
    // The map is filled with various obstacle types to represent the game world
    // Each row represents a row in the game world, and each column represents a tile

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE},
    {BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE},
    {WATER, WATER, WATER, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, WATER, WATER, WATER, TREE_BLOCK, SPACE},
    {WATER, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, WATER, WATER, TREE_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, WATER, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, WATER, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, WATER, WATER, WATER, BRICK_BLOCK, WATER, WATER, WATER, BRICK_BLOCK, BRICK_BLOCK, WATER, WATER},
    {TREE_BLOCK, WATER, WATER, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, WATER, TREE_BLOCK, WATER, TREE_BLOCK},
    {SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, TREE_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE},
    {HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK,  HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE,  HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK},
    {SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE},
    {SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE},
    {SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, HALF_RIGHT_BARRIER_BLOCK, SPACE},
    {SPACE, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, TREE_BLOCK, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, HALF_LOWER_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, TREE_BLOCK, SPACE, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, SPACE, SPACE, SPACE,  SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE},
    {HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK},
    {SPACE, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK , BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, WATER, SPACE, SPACE, SPACE, SPACE, WATER, SPACE, SPACE, SPACE, SPACE},
    {WATER, WATER, SPACE, WATER, SPACE, WATER, WATER, WATER, WATER, SPACE, WATER, WATER, WATER},
    {TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, WATER, SPACE, WATER, TREE_BLOCK, WATER},
    {TREE_BLOCK, WATER, WATER, WATER, WATER, SPACE, BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, SPACE, WATER, SPACE, SPACE, WATER, SPACE, WATER, WATER, WATER, WATER, TREE_BLOCK},
    {WATER, WATER, SPACE, WATER, SPACE, WATER, WATER, SPACE, SPACE, WATER, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, SPACE, WATER, SPACE, SPACE, WATER},
    {SPACE, WATER, WATER, TREE_BLOCK, WATER, WATER, WATER, WATER, SPACE, TREE_BLOCK, BRICK_BLOCK, SPACE, WATER},
    {BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, WATER, SPACE, TREE_BLOCK, TREE_BLOCK, WATER, SPACE, WATER},
    {WATER, WATER, SPACE,WATER, WATER, SPACE, WATER, BRICK_BLOCK, WATER, WATER, WATER, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, WATER, SPACE, SPACE, WATER},
    {SPACE, WATER, WATER, WATER, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, WATER, SPACE, WATER, WATER},
    {SPACE, WATER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE},
    {HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {BARRIER_BLOCK, TREE_BLOCK, WATER, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, WATER, WATER, WATER, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, WATER, WATER, TREE_BLOCK, BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, WATER, WATER, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, WATER, WATER, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, WATER, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, WATER, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, SPACE, WATER, WATER, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, WATER, WATER, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK},
    {SPACE, BRICK_BLOCK, WATER, WATER, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {BARRIER_BLOCK, SPACE, WATER, WATER, TREE_BLOCK, TREE_BLOCK, WATER, WATER, TREE_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, WATER, WATER, TREE_BLOCK, TREE_BLOCK, WATER, WATER, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, SPACE, WATER, WATER, TREE_BLOCK, TREE_BLOCK, WATER, WATER, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE},
    {HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {BARRIER_BLOCK,BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK,BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK},
    {SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, TREE_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE},
    {TREE_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, BARRIER_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, SPACE},
    {TREE_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE},

    {SPACE, SPACE, WATER, WATER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, WATER, TREE_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, WATER, WATER, SPACE},
    {TREE_BLOCK, TREE_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, HALF_LEFT_BARRIER_BLOCK, TREE_BLOCK, WATER, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, BARRIER_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, BARRIER_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, WATER, TREE_BLOCK, HALF_RIGHT_BARRIER_BLOCK, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_LOWER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, WATER, WATER, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, HALF_RIGHT_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, TREE_BLOCK, WATER, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK},
    {BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, WATER, WATER, SPACE, SPACE},
    {BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK},

    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, BRICK_BLOCK,SPACE, SPACE, SPACE, BARRIER_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},

    {SPACE, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK, BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK},
    {BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK},
    {HALF_LEFT_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {HALF_LEFT_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {HALF_RIGHT_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {HALF_RIGHT_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {TREE_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK},
    {BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK},
    {TREE_BLOCK, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK},
    {TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK},
    {BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK},
    {BARRIER_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE},
    {BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, SPACE, SPACE},
    {TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE},
    {SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {TREE_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {TREE_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK},
    {BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK},
    {BARRIER_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, BARRIER_BLOCK},
    {SPACE, BARRIER_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, WATER, SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, WATER, SPACE, HALF_LOWER_BRICK_BLOCK, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE},
    {HALF_UPPER_BARRIER_BLOCK, SPACE, BRICK_BLOCK, WATER, SPACE, BARRIER_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, WATER, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, WATER, WATER, SPACE, WATER, WATER, WATER, WATER, SPACE, SPACE, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, WATER, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK},
    {HALF_UPPER_BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, WATER, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, SPACE, WATER, SPACE, TREE_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, WATER, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, WATER, SPACE, TREE_BLOCK, SPACE},

    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE},
    {HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK},
    {HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE},
    {BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {BARRIER_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE},
    {BARRIER_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {TREE_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK},

    {SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LEFT_BARRIER_BLOCK, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK,  BRICK_BLOCK, BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, HALF_LEFT_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,  BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {BARRIER_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK},

    {SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LEFT_BARRIER_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {HALF_RIGHT_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, TREE_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, SPACE},
    {SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK},
    {TREE_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK},
    {SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK},
    {WATER, WATER, WATER, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, WATER, WATER, WATER},
    {SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {HALF_RIGHT_BARRIER_BLOCK, HALF_RIGHT_BARRIER_BLOCK, HALF_RIGHT_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, HALF_RIGHT_BARRIER_BLOCK, HALF_RIGHT_BARRIER_BLOCK},
    {HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK},
    {HALF_LEFT_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, HALF_RIGHT_BARRIER_BLOCK, HALF_RIGHT_BARRIER_BLOCK},

    {SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, BARRIER_BLOCK, BRICK_BLOCK},
    {SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, BRICK_BLOCK},
    {BRICK_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK},
    {BRICK_BLOCK, BARRIER_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, HALF_RIGHT_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE},
    {BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, WATER, WATER, WATER, WATER, WATER, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, WATER, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, BRICK_BLOCK, SPACE},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, WATER, WATER, WATER, SPACE, WATER, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, WATER, SPACE, SPACE, SPACE, WATER, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE},
    {WATER, WATER, WATER, SPACE, WATER, WATER, BRICK_BLOCK, BRICK_BLOCK, SPACE, WATER, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, WATER, WATER, WATER, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK},
    {BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, BARRIER_BLOCK},
    {SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK},
    {HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE},
    {BARRIER_BLOCK, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE},
    {HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK},
    {SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE},
    {SPACE, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK},
    {HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK},
    {BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK},
    {BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, BRICK_BLOCK},
    {HALF_RIGHT_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, WATER, WATER, WATER, WATER, WATER, WATER, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK},
    {SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE},
    {BRICK_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK},
    {BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK},
    {SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},

    {SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE},
    {BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, SPACE, TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE},
    {BARRIER_BLOCK, BRICK_BLOCK, SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK},
    {SPACE, SPACE, SPACE, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK},
    {BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, TREE_BLOCK, HALF_UPPER_BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK},
    {SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},

    {SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {TREE_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK},
    {TREE_BLOCK, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, SPACE, WATER},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE},
    {WATER, WATER, SPACE, WATER, WATER, WATER, WATER, WATER, SPACE, WATER, WATER, WATER, WATER},
    {TREE_BLOCK, TREE_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {TREE_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, SPACE},
    {TREE_BLOCK, HALF_LOWER_BARRIER_BLOCK, BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, BARRIER_BLOCK , BARRIER_BLOCK, SPACE, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, BARRIER_BLOCK, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, TREE_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK , BARRIER_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, HALF_RIGHT_BARRIER_BLOCK, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, SPACE , SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {HALF_LEFT_BARRIER_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE , BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE, HALF_LEFT_BARRIER_BLOCK, SPACE},
    {SPACE, HALF_RIGHT_BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE, SPACE , BARRIER_BLOCK, BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE},
    {SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE , BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, BARRIER_BLOCK, SPACE},
    {SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE , TREE_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, SPACE, SPACE , SPACE, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_LOWER_BARRIER_BLOCK, BARRIER_BLOCK},
    {HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BARRIER_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, TREE_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, TREE_BLOCK},
    {SPACE, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BARRIER_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, TREE_BLOCK, HALF_LEFT_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, TREE_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK, SPACE, BRICK_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, TREE_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BARRIER_BLOCK},
    {HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, TREE_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK},
    {SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK},

    {SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {HALF_LOWER_BARRIER_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_UPPER_BARRIER_BLOCK, HALF_UPPER_BARRIER_BLOCK, BARRIER_BLOCK, SPACE, SPACE},
    {BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
    {BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, WATER, WATER, SPACE, WATER},
    {HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, WATER, SPACE, SPACE, SPACE},
    {SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, WATER, WATER, SPACE, WATER, WATER, WATER, SPACE, BRICK_BLOCK, BRICK_BLOCK},
    {BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, WATER, BRICK_BLOCK, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE},
    {SPACE, SPACE, SPACE, SPACE, WATER, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, HALF_LEFT_BARRIER_BLOCK, SPACE},
    {WATER, WATER, WATER, SPACE, WATER, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_RIGHT_BARRIER_BLOCK, SPACE, SPACE},
    {SPACE, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_RIGHT_BARRIER_BLOCK, BRICK_BLOCK, BRICK_BLOCK},
    {SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE},
    {BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE},
    {HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},

    {SPACE, TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, TREE_BLOCK, SPACE},
    {TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, SPACE, TREE_BLOCK},
    {TREE_BLOCK, SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK},
    {HALF_UPPER_BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE},
    {SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, HALF_LEFT_BRICK_BLOCK, SPACE},
    {WATER, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE, HALF_LEFT_BARRIER_BLOCK, SPACE, HALF_LEFT_BARRIER_BLOCK, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, SPACE, BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, SPACE, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, WATER, WATER},
    {SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE},
    {SPACE, HALF_RIGHT_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK , HALF_LOWER_BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, TREE_BLOCK},
    {TREE_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE , HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, TREE_BLOCK, TREE_BLOCK},
    {BARRIER_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE , SPACE, SPACE, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK},

    {SPACE, SPACE,SPACE,SPACE, BRICK_BLOCK, SPACE, SPACE,SPACE, BRICK_BLOCK, SPACE, SPACE,SPACE, SPACE},
    {SPACE, TREE_BLOCK,TREE_BLOCK,TREE_BLOCK, BRICK_BLOCK, SPACE, SPACE,SPACE, SPACE, SPACE, HALF_LOWER_BARRIER_BLOCK,HALF_LOWER_BARRIER_BLOCK, HALF_LOWER_BARRIER_BLOCK},
    {BRICK_BLOCK,TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,SPACE,SPACE, SPACE,SPACE, SPACE,SPACE, SPACE,SPACE, SPACE },
    {TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,SPACE,SPACE, SPACE,BRICK_BLOCK, SPACE,BRICK_BLOCK, BRICK_BLOCK,BRICK_BLOCK, HALF_LEFT_BRICK_BLOCK },
    {TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,BRICK_BLOCK,BRICK_BLOCK, BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE,BRICK_BLOCK, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE },
    {TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,TREE_BLOCK,SPACE,SPACE, BRICK_BLOCK, SPACE, SPACE,SPACE, SPACE, HALF_RIGHT_BRICK_BLOCK, SPACE },
    {SPACE,TREE_BLOCK,SPACE,SPACE,SPACE,SPACE, BARRIER_BLOCK, BARRIER_BLOCK, BARRIER_BLOCK,SPACE, SPACE, TREE_BLOCK, SPACE },
    {SPACE,HALF_LOWER_BRICK_BLOCK,SPACE,HALF_LOWER_BRICK_BLOCK,SPACE,SPACE, SPACE, SPACE, SPACE,TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK },
    {BRICK_BLOCK,HALF_LEFT_BRICK_BLOCK,HALF_RIGHT_BRICK_BLOCK,BRICK_BLOCK,HALF_LEFT_BRICK_BLOCK,HALF_RIGHT_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK,TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK },
    {SPACE,SPACE,SPACE,SPACE,SPACE,BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK,TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK },
    {BRICK_BLOCK,SPACE,SPACE, HALF_LEFT_BARRIER_BLOCK,SPACE,SPACE, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK,TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE },
    {BRICK_BLOCK,BRICK_BLOCK,SPACE, HALF_LEFT_BARRIER_BLOCK,SPACE,SPACE, SPACE, SPACE, SPACE,TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, SPACE },
    {BARRIER_BLOCK,BRICK_BLOCK,BRICK_BLOCK, SPACE,SPACE,SPACE, SPACE, SPACE, SPACE,BRICK_BLOCK, SPACE, SPACE, SPACE },

    {SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BARRIER_BLOCK, SPACE,SPACE, SPACE},
    {TREE_BLOCK, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, SPACE, BRICK_BLOCK, TREE_BLOCK, BRICK_BLOCK, BARRIER_BLOCK},
    {TREE_BLOCK, TREE_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, SPACE, BARRIER_BLOCK, SPACE, TREE_BLOCK, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, TREE_BLOCK, TREE_BLOCK, TREE_BLOCK, BARRIER_BLOCK, SPACE, SPACE, TREE_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, SPACE, SPACE, BARRIER_BLOCK, TREE_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE},
    {BARRIER_BLOCK, BRICK_BLOCK, SPACE, BARRIER_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE},
    {SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    {SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE },

    { SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, BARRIER_BLOCK, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE },
    { HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, HALF_LOWER_BRICK_BLOCK, SPACE,  HALF_LOWER_BRICK_BLOCK},
    { HALF_UPPER_BARRIER_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BARRIER_BLOCK },
    { SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, BRICK_BLOCK, BRICK_BLOCK, BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE, HALF_LOWER_BRICK_BLOCK, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, HALF_UPPER_BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE, SPACE, SPACE, SPACE, SPACE, BRICK_BLOCK, SPACE, BRICK_BLOCK, SPACE },
    { SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE }

};

// Function to initialize obstacles based on the obstacle map
void initialiseObstacles(vector<Obstacle>& obstacles, map<int, vector<Obstacle>>& levelSpawnPoints) {

    Vector2 defaultTileWidthHeight = { 30,30 };  // Default size of each tile
    float TileSpacer = defaultTileWidthHeight.x;  // Spacing between tiles

    float tempWidth = 0;  // Temporary variable to track the width position
    float tempHeight = 0;  // Temporary variable to track the height position

    int tempLevel = 35;  // Temporary variable to track the current level
    vector<Obstacle> tempSpawns;  // Temporary vector to store spawn points for the current level

    // Loop through each row and column of the obstacle map
    for (int i = 0; i < 454; ++i) {
        for (int j = 0; j < 13; ++j) {
            // Check the type of obstacle at the current position
            if (tempObstacleMap[i][j] != SPACE) {
                // Depending on the obstacle type, create the corresponding obstacles
                if (tempObstacleMap[i][j] == BRICK_BLOCK) {
                    // Create a full brick block by adding multiple brick obstacles
                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == BARRIER_BLOCK) {
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                }

                if (tempObstacleMap[i][j] == TREE_BLOCK)
                {
                    obstacles.push_back(Obstacle(TREE, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(TREE, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(TREE, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(TREE, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(TREE, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == HALF_LOWER_BARRIER_BLOCK) {

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                }

                if (tempObstacleMap[i][j] == HALF_LEFT_BRICK_BLOCK) {

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == HALF_UPPER_BRICK_BLOCK) {
                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == HALF_RIGHT_BRICK_BLOCK) {

                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }
                if (tempObstacleMap[i][j] == HALF_LOWER_BRICK_BLOCK)
                {

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BRICK, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BRICK, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == HALF_LEFT_BARRIER_BLOCK) {

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == HALF_UPPER_BARRIER_BLOCK) {
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == WATER)
                {
                    obstacles.push_back(Obstacle(WATER, { tempWidth, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(WATER, { tempWidth, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(WATER, { tempWidth, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(WATER, { tempWidth, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(WATER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

                if (tempObstacleMap[i][j] == HALF_RIGHT_BARRIER_BLOCK) {

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 2, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 2, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));
                    obstacles.push_back(Obstacle(BARRIER, { tempWidth + TileSpacer * 3, tempHeight + TileSpacer * 3, defaultTileWidthHeight.x, defaultTileWidthHeight.y }));

                }

            }
           else if (tempObstacleMap[i][j] == SPACE) {
               // If the current position is empty, check if it's a spawn point
               if (i % 13 == 0 || i == 0) {
                   // Create a spawn point obstacle
                   obstacles.push_back(Obstacle(SPAWN_POINT, { tempWidth, tempHeight, TileSpacer * 4, TileSpacer * 4 }));
                   tempSpawns.push_back(Obstacle(SPAWN_POINT, { tempWidth, tempHeight, TileSpacer * 4, TileSpacer * 4 }));
               }
            }

            tempWidth += TileSpacer * 4;  // Move to the next tile position horizontally
        }

        // After processing a row, check if it's the end of a level
        if (i % 13 == 0) {
            // Store the spawn points for the current level
            levelSpawnPoints[tempLevel] = tempSpawns;
            tempLevel--;  // Move to the next level
            tempSpawns.clear();  // Clear the temporary spawn points vector
        }

        tempHeight += TileSpacer * 4;  // Move to the next row position vertically
        tempWidth = 0;  // Reset the horizontal position
    }
}

// Function to draw obstacles on the screen
void drawObstacles(vector<Obstacle>& obstacles, int& currentWaterFrame,
    vector<Texture2D>& waterTextures,
    Texture2D& treeTexture,
    Texture2D& barrierTexture,
    Texture2D& brickTexture) {
    // Loop through each obstacle and draw it based on its type
    for (const auto& obstacle : obstacles) {
        if (obstacle.type == WATER) {
            // Draw water using the current frame of the water animation
            int frameIndex = currentWaterFrame;
            if (frameIndex < waterTextures.size()) {
                DrawTexturePro(
                    waterTextures[frameIndex],
                    Rectangle{ 0, 0, (float)waterTextures[frameIndex].width, (float)waterTextures[frameIndex].height },
                    obstacle.sizeAndPosition,
                    Vector2{ 0, 0 },
                    0.0f,
                    WHITE
                );
            }
        }

        // Draw trees, barriers, bricks, and spawn points based on their type
        if (obstacle.type == TREE) {
            DrawTexture(treeTexture, obstacle.sizeAndPosition.x, obstacle.sizeAndPosition.y, WHITE);
        }

        if (obstacle.type == BARRIER) {
            DrawTexture(barrierTexture, obstacle.sizeAndPosition.x, obstacle.sizeAndPosition.y, WHITE);
        }

        if (obstacle.type == BRICK) {
            DrawTexture(brickTexture, obstacle.sizeAndPosition.x, obstacle.sizeAndPosition.y, WHITE);
        }

        if (obstacle.type == SPAWN_POINT) {
            DrawRectangle(obstacle.sizeAndPosition.x, obstacle.sizeAndPosition.y, obstacle.sizeAndPosition.width, obstacle.sizeAndPosition.height, DARKPURPLE);
        }
    }
}

#endif
